import streamlit as st
import pandas as pd
from app.data_fetcher import (
    get_crypto_list, get_crypto_historical_data,
    get_stock_list, get_stock_historical_data
)
from app.visualizer import create_price_chart
from app.insights_generator import calculate_insights_and_alerts
from app.llm_integration import generate_ai_analysis

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Dashboard Financeiro",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Fun√ß√µes de Cache ---
@st.cache_data(ttl=3600)
def cached_get_asset_list(asset_type):
    if asset_type == "Criptomoedas":
        return get_crypto_list()
    else:
        return get_stock_list()

@st.cache_data(ttl=300)
def cached_get_historical_data(asset_type, selected_id, days):
    if asset_type == "Criptomoedas":
        return get_crypto_historical_data(selected_id, str(days))
    else:
        return get_stock_historical_data(selected_id)

# --- Barra Lateral (Sidebar) ---
st.sidebar.title("üõ†Ô∏è Configura√ß√µes")

# Sele√ß√£o do tipo de ativo
asset_type = st.sidebar.selectbox(
    "1. Escolha o tipo de ativo:",
    ["Criptomoedas", "A√ß√µes (Bolsa de Valores)"]
)

# Carrega a lista de ativos com base no tipo
asset_list = cached_get_asset_list(asset_type)
default_selection = 'BTC' if asset_type == "Criptomoedas" else 'AAPL'

selected_asset_symbol = st.sidebar.selectbox(
    "2. Escolha o ativo:",
    options=list(asset_list.keys()),
    index=list(asset_list.keys()).index(default_selection)
)
selected_asset_id = selected_asset_symbol if asset_type == "A√ß√µes (Bolsa de Valores)" else asset_list[selected_asset_symbol]

# Controles de per√≠odo e alerta
days_to_load = st.sidebar.slider(
    "Selecione o per√≠odo de an√°lise (dias):",
    min_value=30, max_value=365, value=180, step=1,
    disabled=(asset_type == "A√ß√µes (Bolsa de Valores)") # AlphaVantage free tier traz dados 'full'
)
alert_percentage = st.sidebar.number_input(
    "Percentual para Alerta de Varia√ß√£o Di√°ria (%)",
    min_value=0.5, max_value=20.0, value=5.0, step=0.5
)

# --- Corpo Principal do Dashboard ---
st.title(f"üìä Dashboard de An√°lise: {selected_asset_symbol}")

# --- NOVA SE√á√ÉO: DISCLAIMER E INFORMA√á√ïES ---
with st.expander("‚ÑπÔ∏è Sobre esta Aplica√ß√£o e Fontes de Dados", expanded=False):
    st.info(
        """
        **Bem-vindo ao Dashboard Financeiro para Portf√≥lio!**

        Esta aplica√ß√£o √© um projeto de demonstra√ß√£o e **n√£o deve ser usada para tomar decis√µes financeiras reais.** Os dados aqui apresentados podem ter imprecis√µes ou atrasos.
        
        **Fontes de Dados:**
        - **Criptomoedas:** Dados fornecidos pela API p√∫blica da [CoinGecko](https://www.coingecko.com/en/api).
        - **A√ß√µes:** Dados fornecidos pela API gratuita da [Alpha Vantage](https://www.alphavantage.co/).
        - **An√°lise por IA:** Textos gerados pela API da [Groq](https://groq.com/) com o modelo Llama 3.
        """
    )

# Carrega e exibe os dados
with st.spinner(f"Buscando dados para {selected_asset_symbol}..."):
    historical_data = cached_get_historical_data(asset_type, selected_asset_id, days_to_load)

if historical_data.empty:
    st.error(f"N√£o foi poss√≠vel obter os dados para {selected_asset_symbol}. A API pode estar temporariamente indispon√≠vel ou o ativo ser inv√°lido.")
else:
    # --- M√©tricas e Alertas ---
    st.header("üîç Insights R√°pidos")
    insights = calculate_insights_and_alerts(historical_data, alert_percentage)
    
    if insights["alert"]:
        st.warning(insights["alert"])
        
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Pre√ßo Atual (USD)", insights["latest_price"])
    col2.metric("Varia√ß√£o 24h", insights["price_change_24h"])
    col3.metric("Varia√ß√£o 7 dias", insights["price_change_7d"])
    col4.metric("Varia√ß√£o 30 dias", insights["price_change_30d"])
    
    st.markdown("---")

    # --- Gr√°fico Interativo ---
    st.header("üìà Gr√°fico de Pre√ßos")
    price_chart = create_price_chart(historical_data, selected_asset_symbol)
    st.plotly_chart(price_chart, use_container_width=True)

    st.markdown("---")

    # --- An√°lise com IA ---
    st.header("ü§ñ An√°lise por IA (Llama 3)")
    asset_type_for_ia = 'criptomoeda' if asset_type == "Criptomoedas" else 'a√ß√£o'
    with st.spinner("Gerando an√°lise com Intelig√™ncia Artificial..."):
        ai_analysis = generate_ai_analysis(selected_asset_symbol, insights, asset_type_for_ia)
        st.info(ai_analysis)

# --- Rodap√© ---
st.sidebar.markdown("---")
st.sidebar.info("Este √© um projeto de portf√≥lio. Os dados s√£o para fins de demonstra√ß√£o.")